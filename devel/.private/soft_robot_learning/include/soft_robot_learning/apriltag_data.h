// Generated by gencpp from file soft_robot_learning/apriltag_data.msg
// DO NOT EDIT!


#ifndef SOFT_ROBOT_LEARNING_MESSAGE_APRILTAG_DATA_H
#define SOFT_ROBOT_LEARNING_MESSAGE_APRILTAG_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace soft_robot_learning
{
template <class ContainerAllocator>
struct apriltag_data_
{
  typedef apriltag_data_<ContainerAllocator> Type;

  apriltag_data_()
    : x_pos_gnd(0.0)
    , y_pos_gnd(0.0)  {
    }
  apriltag_data_(const ContainerAllocator& _alloc)
    : x_pos_gnd(0.0)
    , y_pos_gnd(0.0)  {
  (void)_alloc;
    }



   typedef float _x_pos_gnd_type;
  _x_pos_gnd_type x_pos_gnd;

   typedef float _y_pos_gnd_type;
  _y_pos_gnd_type y_pos_gnd;





  typedef boost::shared_ptr< ::soft_robot_learning::apriltag_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soft_robot_learning::apriltag_data_<ContainerAllocator> const> ConstPtr;

}; // struct apriltag_data_

typedef ::soft_robot_learning::apriltag_data_<std::allocator<void> > apriltag_data;

typedef boost::shared_ptr< ::soft_robot_learning::apriltag_data > apriltag_dataPtr;
typedef boost::shared_ptr< ::soft_robot_learning::apriltag_data const> apriltag_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::soft_robot_learning::apriltag_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::soft_robot_learning::apriltag_data_<ContainerAllocator1> & lhs, const ::soft_robot_learning::apriltag_data_<ContainerAllocator2> & rhs)
{
  return lhs.x_pos_gnd == rhs.x_pos_gnd &&
    lhs.y_pos_gnd == rhs.y_pos_gnd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::soft_robot_learning::apriltag_data_<ContainerAllocator1> & lhs, const ::soft_robot_learning::apriltag_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace soft_robot_learning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::soft_robot_learning::apriltag_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soft_robot_learning::apriltag_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soft_robot_learning::apriltag_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7eb6b532fc62c3db52dc0849aeb59aea";
  }

  static const char* value(const ::soft_robot_learning::apriltag_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7eb6b532fc62c3dbULL;
  static const uint64_t static_value2 = 0x52dc0849aeb59aeaULL;
};

template<class ContainerAllocator>
struct DataType< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "soft_robot_learning/apriltag_data";
  }

  static const char* value(const ::soft_robot_learning::apriltag_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_pos_gnd\n"
"float32 y_pos_gnd\n"
;
  }

  static const char* value(const ::soft_robot_learning::apriltag_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_pos_gnd);
      stream.next(m.y_pos_gnd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct apriltag_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::soft_robot_learning::apriltag_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::soft_robot_learning::apriltag_data_<ContainerAllocator>& v)
  {
    s << indent << "x_pos_gnd: ";
    Printer<float>::stream(s, indent + "  ", v.x_pos_gnd);
    s << indent << "y_pos_gnd: ";
    Printer<float>::stream(s, indent + "  ", v.y_pos_gnd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOFT_ROBOT_LEARNING_MESSAGE_APRILTAG_DATA_H
