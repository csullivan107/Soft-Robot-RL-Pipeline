// Generated by gencpp from file soft_robot_learning/sensor_processing.msg
// DO NOT EDIT!


#ifndef SOFT_ROBOT_LEARNING_MESSAGE_SENSOR_PROCESSING_H
#define SOFT_ROBOT_LEARNING_MESSAGE_SENSOR_PROCESSING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace soft_robot_learning
{
template <class ContainerAllocator>
struct sensor_processing_
{
  typedef sensor_processing_<ContainerAllocator> Type;

  sensor_processing_()
    : xSensor(0.0)
    , ySensor(0.0)  {
    }
  sensor_processing_(const ContainerAllocator& _alloc)
    : xSensor(0.0)
    , ySensor(0.0)  {
  (void)_alloc;
    }



   typedef float _xSensor_type;
  _xSensor_type xSensor;

   typedef float _ySensor_type;
  _ySensor_type ySensor;





  typedef boost::shared_ptr< ::soft_robot_learning::sensor_processing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soft_robot_learning::sensor_processing_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_processing_

typedef ::soft_robot_learning::sensor_processing_<std::allocator<void> > sensor_processing;

typedef boost::shared_ptr< ::soft_robot_learning::sensor_processing > sensor_processingPtr;
typedef boost::shared_ptr< ::soft_robot_learning::sensor_processing const> sensor_processingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::soft_robot_learning::sensor_processing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::soft_robot_learning::sensor_processing_<ContainerAllocator1> & lhs, const ::soft_robot_learning::sensor_processing_<ContainerAllocator2> & rhs)
{
  return lhs.xSensor == rhs.xSensor &&
    lhs.ySensor == rhs.ySensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::soft_robot_learning::sensor_processing_<ContainerAllocator1> & lhs, const ::soft_robot_learning::sensor_processing_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace soft_robot_learning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::soft_robot_learning::sensor_processing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::soft_robot_learning::sensor_processing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::soft_robot_learning::sensor_processing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85a7f1f6ce3d01e7b0a20f37a29b8607";
  }

  static const char* value(const ::soft_robot_learning::sensor_processing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85a7f1f6ce3d01e7ULL;
  static const uint64_t static_value2 = 0xb0a20f37a29b8607ULL;
};

template<class ContainerAllocator>
struct DataType< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "soft_robot_learning/sensor_processing";
  }

  static const char* value(const ::soft_robot_learning::sensor_processing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This is a custom message template for the state of the robot\n"
"#Modify it with the amount of sensors you have to put into your RL \n"
"#algorithm\n"
"\n"
"float32 xSensor\n"
"float32 ySensor\n"
;
  }

  static const char* value(const ::soft_robot_learning::sensor_processing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xSensor);
      stream.next(m.ySensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_processing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::soft_robot_learning::sensor_processing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::soft_robot_learning::sensor_processing_<ContainerAllocator>& v)
  {
    s << indent << "xSensor: ";
    Printer<float>::stream(s, indent + "  ", v.xSensor);
    s << indent << "ySensor: ";
    Printer<float>::stream(s, indent + "  ", v.ySensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOFT_ROBOT_LEARNING_MESSAGE_SENSOR_PROCESSING_H
